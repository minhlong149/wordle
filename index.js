// -------------------------------------------------------------

// guesses l√† m·ªôt m·∫£ng c√≥ 6 ph·∫ßn t·ª´
// t∆∞∆°ng ·ª©ng v·ªõi 6 l·∫ßn m√† ng∆∞·ªùi d√πng nh·∫≠p
// l∆∞u l·∫°i ti·∫øn tr√¨nh ch∆°i c·ªßa ng∆∞·ªùi d√πng

// M·ªói ph·∫ßn t·ª´ l·ªõn l√† m·ªôt m·∫£ng c√≥ 5 ph·∫ßn t·ª´ con
// M·ªói ph·∫ßn t·ª≠ con ch·ª©a m·ªôt ch·ªØ c√°i m√† ng∆∞·ªùi d√πng ch·ªçn
let guesses = [
  ["", "", "", "", ""],
  ["", "", "", "", ""],
  ["", "", "", "", ""],
  ["", "", "", "", ""],
  ["", "", "", "", ""],
  ["", "", "", "", ""],
];



// g·ªçi h√†m getUserGuess l·∫•y t·ª´ m√† ng∆∞·ªùi d√πng ƒëo√°n d∆∞·ªõi d·∫°ng chu·ªói
function getUserGuess(row = currentRow) {
  return guesses[row].join("");
}

// currentRow cho bi·∫øt l∆∞·ª£t th·ª≠ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
// currentRow l√† m·ªôt s·ªë nguy√™n c√≥ gi√° tr·ªã t·ª´ 0 ƒë·∫øn 5
let currentRow = 0;

// currentRow cho bi·∫øt con tr·ªè m√† ng∆∞·ªùi d√πng nh·∫≠p ·ªü l∆∞·ª£t hi·ªán t·∫°i
// currentRow l√† m·ªôt s·ªë nguy√™n c√≥ gi√° tr·ªã t·ª´ 0 ƒë·∫øn 4
let currentTile = 0;

// keyword l√† t·ª´ m√† ng∆∞·ªùi d√πng c·∫ßn ph·∫£i t√¨m
// keyword s·∫Ω ƒë∆∞·ª£c t·∫°o ng·∫´u nhi√™n
let keyword = "";

let isWinning = false;

function loadLocalSave()//function d√πng ƒë·ªÉ load l·∫°i m√†n h√¨nh hi·ªÉn th·ªã v√† d·ªØ li·ªáu m√†n ch∆°i d·ªü
{
  keyword = window.localStorage.getItem('keyword')
  row=Number(window.localStorage.getItem('currentRow'))
  guess= JSON.parse(window.localStorage.getItem("guesses"))
  result=JSON.parse(window.localStorage.getItem('result'))
  if(guess!=null){
    guesses=guess
    for(let i=0;i<=row;i++)
    {
        for(let j=0;j<5;j++)
        {
          updateTileLetter()
          addKeysColor(result)
          currentTile++;
        }
        addTilesColor(result)
        currentRow++;
        currentTile=0;
    }
    currentRow=row+1;
  }
}

function saveGameState(result)//function d√πng ƒë·ªÉ l∆∞u nh·ªØng th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ c√≥ th·ªÉ load l·∫°i m√†n ƒëang ch∆°i d·ªü
{
  window.localStorage.setItem('keyword', keyword)
  window.localStorage.setItem('guesses', JSON.stringify(guesses));
  window.localStorage.setItem('currentRow', currentRow);
  window.localStorage.setItem('result', JSON.stringify(result))
  window.localStorage.setItem('Reset',false)
  
}

// -------------------------------------------------------------
// KEYBOARD EVENT

const keys = document.querySelectorAll(".key");
keys.forEach((key) => {
  key.addEventListener("click", () => {
    // Ng∆∞·ªùi d√πng ch·ªâ c√≥ th·ªÉ ·∫•n khi tr√≤ ch∆°i ch∆∞a k·∫øt th√∫c
    if (gameIsOver()) return;

    // Tu·ª≥ v√†o lo·∫°i ph√≠m m√† ng∆∞·ªùi d√πng c√≥ th·ªÉ th√™m, xo√° k√Ω t·ª±
    // ho·∫∑c g·ª≠i l√™n ƒë·ªÉ h·ªá th·ªëng ki·ªÉm tra k·∫øt qu·∫£
    switch (key.id) {
      case "key-enter":
        submitGuess();
        break;

      case "key-delete":
        deleteLetter();
        break;

      default:
        const letter = getLetterFromKey(key);
        addLetter(letter);
        break;
    }
  });
});

function getLetterFromKey(key) {
  // Tr·∫£ v·ªÅ ch·ªØ c√°i t∆∞∆°ng ·ª©ng v·ªõi ph√≠m key
  // D·ªØ li·ªáu tr·∫£ v·ªÅ l√† chu·ªói c√≥ 1 k√Ω t·ª±
  return key.id.charAt(key.id.length - 1);
}

// -------------------------------------------------------------
// UPDATE LETTER

function addLetter(letter) {
  if (canAddLetter()) {
    updateGuess(letter);
    currentTile++;
    console.log(
      `Guess is '${getUserGuess()}'`,
      `Cursor is at row ${currentRow}, tile ${currentTile}`
    );
  }
}

function deleteLetter() {
  if (canDeleteLetter()) {
    currentTile--;
    updateGuess("");
    console.log(
      `Guess is '${getUserGuess()}'`,
      `Cursor is at row ${currentRow}, tile ${currentTile}`
    );
  }
}

function updateGuess(letter, tile = currentTile, row = currentRow) {
  guesses[row][tile] = letter;
  updateTileLetter();
}

function updateTileLetter(
  letter = guesses[currentRow][currentTile],
  row = currentRow,
  tile = currentTile
) {
  // TODO: C·∫≠p nh·∫≠p k√Ω t·ª± letter l√™n Board
  // d·ª±a v√†o row v√† tile ƒë·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ c·∫ßn th√™m v√†o
  row++;
  const nextRow = document.getElementById('row-' + row);
  const nextTile = nextRow.querySelectorAll('span.tile');
  nextTile[tile].textContent=letter

}

function canAddLetter(tile = currentTile) {
  return tile < 5;
}
function canDeleteLetter(tile = currentTile) {
  return tile > 0;
}

// -------------------------------------------------------------
// SUMMIT & CHECK GUESS

function submitGuess() {
  if (guessIsValid()) {
    const result = checkUserGuess();
    console.log(result);

    // result s·∫Ω tr·∫£ v·ªÅ m·ªôt m·∫£ng 5 ph·∫ßn t·ª≠
    // ch·ª©a 1 trong 3 gi√° tr·ªã correct, present ho·∫∑c absent
    // function saveGameState() s·∫Ω ƒë∆∞·ª£c g·ªçi m·ªói khi c√≥ t·ª´ h·ª£p l·ªá ƒë∆∞·ª£c nh·∫≠p
    saveGameState(result);
    addTilesColor(result);
    addTilesAnimation();

    if (guessIsCorrect(result)) {
      isWinning = true;
      showWinningMessage();
    //s·ª≠ d·ª•ng key 'Reset' ƒë·ªÉ quy·∫øt ƒë·ªãnh t·∫°o m√†n ch∆°i m·ªõi khi ƒëo√°n ƒë√∫ng, h·∫øt l∆∞·ª£t hay load l·∫°i m√†n ƒëang ch∆°i d·ªü 
      window.localStorage.setItem('Reset',true)
    } else {
      console.log("Guess is NOT correct");

      addKeysColor(result);
      currentRow++;
      currentTile = 0;

      if (gameIsOver()) {
        showLosingMessage();
        window.localStorage.setItem('Reset',true)
      }
    }
  } else {
    console.log(`Guess '${getUserGuess()}' is not valid`);
    shakeTiles();
  }
}

function guessIsValid(userGuess = getUserGuess()) {
  if (userGuess.length !== 5) return false;
  if (!dictionary.includes(userGuess)) return false;
  return true;
}

function guessIsCorrect(result) {
  return result.every((letter) => isCorrect(letter));
}

function gameIsOver() {
  return isWinning || currentRow > 5;
}

function showWinningMessage() {
  console.log("Guess is correct");
  showModal();
}

function showLosingMessage() {
  console.log(`You lose! Keyword is ${keyword}`);
  showModal();
}

// -------------------------------------------------------------
// VALIDATION

const correct = "üü¢";
const present = "üü°";
const absent = "üî¥";

function isCorrect(letter) {
  return letter == correct;
}

function isPresent(letter) {
  return letter == present;
}

function isAbsent(letter) {
  return letter == absent;
}

function checkUserGuess(userGuess = getUserGuess(), solutionWord = keyword) {
  // H√†m n√†y nh·∫≠n gi√° tr·ªã ƒë·∫ßu v√†o l√† 2 chu·ªói k√Ω t·ª±
  // v√† tr·∫£ v·ªÅ m·ªôt m·∫£ng k·∫øt qu·∫£ so s√°nh c·ªßa hai chu·ªói ƒë√≥

  let result = [absent, absent, absent, absent, absent];

  // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë√∫ng k√Ω t·ª± ƒë√∫ng v·ªã tr√≠
  for (let i = 0; i < 5; i++) {
    if (userGuess.charAt(i) === solutionWord.charAt(i)) {
      result[i] = correct;
      const cutIndex = i;
      solutionWord = cutLetter(solutionWord, cutIndex);
    }
  }

  // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë√∫ng k√Ω t·ª± SAI v·ªã tr√≠
  for (let i = 0; i < 5; i++) {
    if (solutionWord.includes(userGuess.charAt(i)) && !isCorrect(result[i])) {
      result[i] = present;
      const cutIndex = solutionWord.indexOf(userGuess.charAt(i));
      solutionWord = cutLetter(solutionWord, cutIndex);
    }
  }

  return result;
}

function cutLetter(word, index) {
  return word.slice(0, index) + "-" + word.slice(index + 1);
}

// -------------------------------------------------------------
// ADD COLOR & ANIMATION

function addTilesColor(result, row = currentRow) {
  // TODO: C·∫≠p nh·∫≠p m√†u s·∫Øc c·ªßa c√°c tiles tr√™n row hi·ªán t·∫°i theo result
  // Ch√∫ √Ω t∆∞∆°ng th√≠ch v·ªõi hi·ªáu ·ª©ng
  result = checkUserGuess();
  const boardRow = document.getElementById(`row-${row + 1}`);
  const tiles = boardRow.querySelectorAll(".tile");
  for(let i = 0; i < 5; i++){
    const tile = tiles[i];
    if(result[i] == correct){
      tile.classList.add('tile--correct');
    } else if(result[i] == present){
      tile.classList.add('tile--present');
    }else{
      tile.classList.add('tile--absent')
    }
    // G·ª£i √Ω: Th√™m c√°c l·ªõp tile--absent, tile--present, v√† tile--correct
    // v√†o c√°c tile t∆∞∆°ng ·ª©ng
  }
}

function addTilesAnimation(row = currentRow) {
  // TODO: Th√™m hi·ªáu ·ª©ng hi·ªÉn th·ªã tiles tr√™n row hi·ªán t·∫°i
  // L∆∞u √Ω c√≥ delay gi·ªØa c√°c ph√≠m. Ch√∫ √Ω t∆∞∆°ng th√≠ch khi th√™m m√†u
  const boardRow = document.getElementById(`row-${row + 1}`);
  const tiles = boardRow.querySelectorAll(".tile");

  for (let i = 0; i < 5; i++) {
    const tile = tiles[i];
    tile.classList.add("tile--flip");
    //tile.style.backgroundColor = tileColor;
    tile.style.animationDelay = "1s";
  }
  const animationDuration = 500; //ms
	tile.classList.add('tile--shake');
	tile.style.animationDelay = `${(i * animationDuration) / 2}ms`;
  // G·ª£i √Ω: Th√™m l·ªõp tile--flip v√†o tile
}

function addKeysColor(result, guessRow = guesses[currentRow]) {
  // TODO: C·∫≠p nh·∫≠p m√†u s·∫Øc c·ªßa c√°c ph√≠m ƒë√£ v·ª´a ·∫•n

  // H√†m n√†y truy·ªÅn v√†o m·ªôt m·∫£ng 5 ph·∫ßn t·ª≠ ch√≠nh l√† 5 k√Ω t·ª± m√† ng∆∞·ªùi d√πng v·ª´a nh·∫≠p
  // ƒê·ªïi m√†u c√°c ph√≠m guessRow tr√™n b√†n ph√≠m d·ª±a v√†o k·∫øt qu·∫£ result
  for (i = 0; i < 5; i++)
  {
    let key = document.getElementById('key-' + guessRow[i]);
    if(result[i] == correct) {
      key.classList.add('key--correct');
    }
    else if (result[i] == present){
      key.classList.add('key--present');
    }
    else {
      key.classList.add('key--absent');
    }
  }
  // G·ª£i √Ω: Th√™m c√°c l·ªõp key--absent, key--present, v√† key--correct
  // v√†o c√°c ph√≠m t∆∞∆°ng ·ª©ng
}

function shakeTiles(row = currentRow) {
  // TODO: Th√™m animation hi·ªÉn th·ªã tile khi nh·∫≠p ph√≠m v√† error khi nh·∫≠p kh√¥ng h·ª£p l·ªá
  const boardRow = document.getElementById(`row-${row + 1}`);
  const tiles = boardRow.querySelectorAll(".tile");

  for (let i = 0; i < 5; i++) {
    const tile = tiles[i];
    tile.classList.add("tile--shake");
  }
}

// -------------------------------------------------------------
// MODAL

const closeModalIcon = document.querySelector(".modal__closeIcon");
closeModalIcon.addEventListener("click", hideModal());

function showModal() {}
function hideModal() {}

// -------------------------------------------------------------
// REAL KEYBOARD

// TODO: T·∫°o s·ª± ki·ªán cho c√°c ph√≠m tr√™n b√†n ph√≠m th·ª±c
// c√≥ th·ªÉ x·ª≠ l√Ω ƒë∆∞·ª£c nh∆∞ d√πng b√†n ph√≠m tr√™n trang web
addEventListener("keyup",function(event){

  if(event.code  >= 'KeyA' && event.code  <= 'KeyZ')
    addLetter(event.key);
  else if (event.code == 'Enter')
    submitGuess();
  else if (event.code == 'Backspace')
    deleteLetter();
})
// Ch·ªâ y√™u c·∫ßu c√°c ph√≠m ch·ªØ c√°i, n√∫t xo√° (backspace) v√† enter

// -------------------------------------------------------------
// FETCHING DATA

// dictionary ch·ª©a danh s√°ch c√°c t·ª´ c√≥ 5 ch·ªØ c√°i c√≥ nghƒ©a
// d√πng ƒë·ªÉ ki·ªÉm tra t·ª´ m√† ng∆∞·ªùi d√πng nh·∫≠p
let dictionary = [];

// targetWords ch·ªâ ch·ª©a m·ªôt ph·∫ßn c√°c t·ª´ ph·ªï bi·∫øn
// d√πng ƒë·ªÉ sinh t·ª´ kho√° cho ng∆∞·ªùi d√πng t√¨m
let targetWords = [];

async function updateDictionary() {
  const response = await fetch("./data/dictionary.json");
  dictionary = await response.json();
}

async function updateTargetWords() {
  const response = await fetch("./data/targetWords.json");
  targetWords = await response.json();
}

// -------------------------------------------------------------
// UTILS

function newGame() {
  guesses = [
    ["", "", "", "", ""],
    ["", "", "", "", ""],
    ["", "", "", "", ""],
    ["", "", "", "", ""],
    ["", "", "", "", ""],
    ["", "", "", "", ""],
  ];
  currentRow = 0;
  currentTile = 0;
  isWinning = false;
  //N·∫øu key 'Reset l√† false th√¨ load l·∫°i m√†n ƒëang ch∆°i d·ªü c√≤n kh√¥ng th√¨ t·∫°o m·ªôt keyword ng·∫•u nhi√™n v√† b·∫Øt ƒë·∫ßu m√†n ch∆°i m·ªõi
  if(JSON.parse(window.localStorage.getItem('Reset'))==false)
  { 
    loadLocalSave();
  }else{
    keyword = getRandomWord();
  }
}

function getRandomWord() {
  return randomItem(targetWords);
}

function randomItem(items) {
  return items[Math.floor(Math.random() * items.length)];
}

(async function () {
  await updateDictionary();
  await updateTargetWords();
  newGame();
})();

//Dark mode
function DarkMode()
{
  var element = document.body;
  element.classList.toggle('dark-mode');
}
